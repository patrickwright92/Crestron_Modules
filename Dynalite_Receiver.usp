/*******************************************************************************************
 
Program Name:	Dynalite_Receiver.usp
Programmer:		Patrick Wright
Purpose / Notes:	
					To Control a Dynalite Lighting System  (See Help File for more information)

*******************************************************************************************
*******************************************************************************************

	Compiler Directives

*******************************************************************************************/
#DEFINE_CONSTANT MAXAREAS 255
#DEFAULT_NONVOLATILE

#HELP_BEGIN
   This module is designed as an interface between the other Crestron modules
   and the dynalite systems. This means:
   - it takes care of the checksum calculation of both incomming and outgoing messages.
   - it handles the appropriate time that has to be kept between two outgoing messages.
   - it sends the incoming messages to the corresponding area (i.e. to the "Dynalite_Area"-module
     for which the message is intented).
     
   INPUTS:
   		RX$: Buffers the incoming messages for handling.
   		FROM_AREAS$: Buffers the outgoing messages (comming from the "Dynalite_Area"-module), 
   		             to append the checksum and send them out with the appropriate interval
   OUTPUTS:
   		TX$: Output to the Dynalite System
   		TO_AREA$: After handling the messages in RX$ will be sent over this signal to 
   		          the right "Dynalite_Area"-module.  
   
   One program will likely contain one Dynalite_Receiver module with multiple Dynalite_Area modules.
#HELP_END

/*******************************************************************************************

	Inputs and Outputs

*******************************************************************************************/
BUFFER_INPUT RX$[2000];
BUFFER_INPUT FROM_AREAS$[2000];

STRING_OUTPUT TX$;
STRING_OUTPUT TO_AREA$[MAXAREAS];

/*******************************************************************************************

  Global Variables

*******************************************************************************************/
INTEGER xOK1, xOK2, Marker1, Marker2, area, lastArea;
STRING TempString1[8], TempString2[8], TEMPRX[200], checksum[1], moduleName[25];


/*******************************************************************************************

	Includes

*******************************************************************************************/
#user_library "Logging"

/*******************************************************************************************

	Functions

*******************************************************************************************/
Function show(string toondeze)
{
    integer i;
    print("\n");
    for (i = 1 to len(toondeze))
    {
    	print("%x ", byte(mid(toondeze, i, 1), 1));
    }
}

String_Function checked(String to_check)
{
    integer sum;
    integer i;
    sum = 0;
    for (i = 1 to len(to_check))
    {
    	sum = sum + byte(mid(to_check, i, 1), 1);
    }
    sum = -sum;
    Return (chr(sum));
}

/*******************************************************************************************

	Events

*******************************************************************************************/
CHANGE RX$
{
	if (xOK1)
	{
		xOK1 = 0;
		while (len(RX$))
		{
			if (len(RX$) >= 8)
				{
					TempString1 = remove(mid(RX$, 1, 8), RX$);
					area = byte(mid(TempString1, 2, 1), 1);
					if (mid(TempString1, 8, 1) = checked(mid(TempString1, 1, 7)))
					{
						if (area <= lastArea && area > 0)
							{
								TO_AREA$[area] = TempString1;	
							}
					}
					area = 0;
					clearbuffer(TempString1);
				}
		}
		xOK1 = 1;
	}    
}

CHANGE FROM_AREAS$
{
	if (xOK2)
	{
		xOK2 = 0;
		while (len(FROM_AREAS$))
		{
			wait(20)
			{
				if (len(FROM_AREAS$) >= 7)
				{
					TempString2 = remove(left(FROM_AREAS$, 7), FROM_AREAS$);
					checksum = checked(TempString2);
					TempString2 = TempString2 + checksum;
					MakeString(TX$, "%s", TempString2);
					clearbuffer(TempString2);
				}
			}
		}
		xOK2 = 1;
	}    
}

/*******************************************************************************************

  Main Function

*******************************************************************************************/
Function Main()
{
	moduleName = "Dynalite_Receiver.usp"
    xOK1 = 1;
    xOK2 = 1;
    Marker1 = 0;
    Marker2 = 0;
    for (lastArea = MAXAREAS to 1 step -1)
	{
		if (isSignalDefined(TO_AREA$[lastArea]))
		{
			break;
		}
	}
}


