/*******************************************************************************************
 
Program Name:	Dynalite_Area.usp
Programmer:		Patrick Wright
Purpose / Notes:	
					To Control a Dynalite Lighting System Area (See Help File for more information)

*******************************************************************************************
*******************************************************************************************

	Compiler Directives

*******************************************************************************************/
#DEFINE_CONSTANT MAXPRESETS 170
#DEFINE_CONSTANT MAXCHANNELS 255
#DEFINE_CONSTANT CHANNEL_LEVEL 96
#DEFINE_CONSTANT LINEAR_PRESET 101
#DEFINE_CONSTANT CLASSIC_CHANNEL 121

#DEFAULT_NONVOLATILE

#HELP_BEGIN
This module is designed to control one area of the dynalite network. So probably more 
then one of these modules is included in one program together with one "Dynalite_Receiver" 
module which controls the communication.

INPUTS:
	- classic$: when high the module sends commands in the classic form
	- program$: When triggered the module will send out the command to save the current 
	            channel-level to the current selected preset.
	- preset$[MAXPRESETS]: When triggered the corresponding preset will be triggered. 
	- RX$:      The messages coming from the Dynalite System via the Dynalite_Receiver module.
	- area$:    This input defines the area number the module will be controlling.
                Therefor it has to be triggered at the beginning of the program.
                (example: analog init --> 1d = area1; 2d = area2 ...)
	- fade$:    When setting a channel to a certain value via the channel$[MAXCHANNELS], a
	            fade time must be given. 1d = 1sec ; 2d = 2sec....
	- channel$[MAXCHANNELS]: sets the channel to the given value
	                         0d = 0%; 65535d = 100%
	                        
OUTPUTS: 
	- TX$: Output to the Dynalite system via the Dynalite_Receiver module
	- preset_fb$[MAXPRESETS]: Feedback of which preset is currently selected.
	- channel_fb$[MAXCHANNELS]: Gives feedback to all the channels.
#HELP_END

/*******************************************************************************************

	Inputs and Outputs

*******************************************************************************************/
DIGITAL_INPUT classic$;
DIGITAL_INPUT program$;
STRING_INPUT RX$[2000];
ANALOG_INPUT area$;
ANALOG_INPUT fade$;
DIGITAL_INPUT preset$[MAXPRESETS];
ANALOG_INPUT channel$[MAXCHANNELS];

STRING_OUTPUT TX$;
DIGITAL_OUTPUT preset_fb$[MAXPRESETS];
ANALOG_OUTPUT channel_fb$[MAXCHANNELS];

/*******************************************************************************************

  Global Variables

*******************************************************************************************/
INTEGER lastPreset, lastChannel, xOK, opCode, offSet, preset, channel, bank, fade, i, currentPreset;
INTEGER join;
STRING TempString[8], moduleName[20];

/*******************************************************************************************

	Includes

*******************************************************************************************/
#user_library "Logging"

/*******************************************************************************************

	Events

*******************************************************************************************/
PUSH preset$
{
	integer x;
	x = getLastModifiedArrayIndex();
	currentPreset = x;
	if (classic$)
	{
		bank = (x-1)/8;
		opCode = x - (bank*8);
		switch(opCode)
		{
			case (1):
				opCode = 0;
			case (2): 
				opCode = 1;
			case (3):
				opCode = 2;
			case (4):
				opCode = 3;
			case (5):
				opCode = 10;
			case (6):
				opCode = 11;
			case (7):
				opCode = 12;
			case (8):
				opCode = 13;
		}
		MakeString(TX$, "\x1C%s\x64%s\x00%s%s", chr(area$), chr(opCode), chr(bank), chr(join)); 
	}
	else
	{
		MakeString(TX$, "\x1C%s%s\x65\x64\x00%s", chr(area$), chr(x - 1), chr(join)); 
	}
}

PUSH program$
{
	if (currentPreset)
	{
		MakeString(TX$, "\x1C%s\x00\x08\x00\x00%s", chr(area$), chr(join)); 
	}
}

CHANGE channel$
{
	integer x;
	integer range;
	integer factor;
	integer value;
	x = getLAstModifiedArrayIndex();
	value = (channel$[x] * 100) / 65535;
	value = 100 - value;
	value = (value * 255) / 100;
	if (value = 0) value = 1;
	if (fade <= 25)
	{
		range = 113;		
		factor = fade * 10;
	}
	else if (fade <= 195)
	{
		range = 114;
		factor = fade;
	}
	else if (fade <= 1320)
	{
		range = 115;
		factor = fade / 60;
	}
	if (classic$)
	{
		bank = (x-1)/4;
		switch(bank)
		{
			case (0):
				offSet = 255;
			case (1):
				offSet = 0;
			case (2): 
				offSet = 1;
			case (3):
				offSet = 2;
		}
		opCode = 127 + (x - (bank * 4));
		MakeString(TX$, "\x1C%s%s%s%s\x64%s", chr(area$), chr(value), chr(opCode), chr(offSet), chr(join)); 
	}
	else
	{
		MakeString(TX$, "\x1C%s%s%s%s%s%s", chr(area$), chr(x-1), chr(range), chr(value), chr(factor), chr(join));
	}
}

CHANGE fade$
{
	fade = fade$;
}

CHANGE RX$
{
	integer factor;
	integer value;
	if (xOK)
	{
		xOK = 0;
		while (len(RX$))
		{
			if (len(RX$) >= 8)
			{
				TempString = remove(left(RX$, 8), RX$);
				opCode = byte(mid(TempString, 4, 1), 1);
				switch (opCode)
				{
					case (LINEAR_PRESET):
					{
						preset = byte(mid(TempString, 3, 1), 1) + 1;
						for (i = 1 to lastPreset)
						{
							preset_fb$[i] = 0;
						}
						preset_fb$[preset] = 1;
						wait(20)
						{
							for (i = 0 to lastChannel - 1)
							{
								MakeString(TX$, "\x1C%s%s\x61\x00\x00%s", chr(area$), chr(i), chr(join));
							}
						}
					}
					
					case (CHANNEL_LEVEL):
					{
						//ONE FOR ALL
						channel = byte(mid(TempString, 3, 1), 1) + 1;
						value = byte(mid(TempString, 5, 1), 1);
						value = (value * 100) / 255;
						value = 100 - value;
						value = (value * 65535) / 100;
						channel_fb$[channel] = value;
					}
				}
				if (opCode >= 0 && opCode <= 3)
				{
					//CLASSIC PRESET
					bank = byte(mid(TempString, 6, 1), 1);
					preset = opCode + 1;
					preset = preset + (8 * bank);
					for (i = 1 to lastPreset)
					{
						preset_fb$[i] = 0;
					}
					preset_fb$[preset] = 1;
					wait(20)
					{
						for (i = 0 to lastChannel - 1)
						{
							MakeString(TX$, "\x1C%s%s\x61\x00\x00%s", chr(area$), chr(i), chr(join));
						}
					}
				}
				if (opCode >= 10 && opCode <= 13)
				{
					//CLASSIC PRESET
					bank = byte(mid(TempString, 6, 1), 1);
					preset = opCode - 5;
					preset = preset + (8 * bank);
					for (i = 1 to lastPreset)
					{
						preset_fb$[i] = 0;
					}
					preset_fb$[preset] = 1;
					wait(20)
					{
						for (i = 0 to lastChannel - 1)
						{
							MakeString(TX$, "\x1C%s%s\x61\x00\x00%s", chr(area$), chr(i), chr(join));
						}
					}
				}
				if (opCode >= 113 && opCode <= 115)
				{
					//LINEAR CHANNEL
					factor = byte(mid(TempString, 6, 1), 1);
					value = byte(mid(TempString, 5, 1), 1);
					channel = byte(mid(TempString, 3, 1), 1);
					value = (value * 100) / 255;
					value = 100 - value;
					value = (value * 65535) / 100;
					switch (opCode)
					{
						case (113):
						{
							channel_fb$[channel + 1] = value;
						}
						case (114):
						{
							if (factor <= 195)
							{
								channel_fb$[channel + 1] = value;							
							}
						}
						case (115):
						{
							if (factor <= 22)
							{
								channel_fb$[channel + 1] = value;							
							} 
						}
					}
				}
				if (opCode >= 128 && opCode <=131)
				{
					//CLASSIC CHANNEL
					value = byte(mid(TempString, 3, 1), 1);
					value = (value * 100) / 255;
					value = 100 - value;
					value = (value * 65535) / 100;										
					opCode = byte(mid(TempString, 4, 1), 1);
					opCode = opCode - 127;
					offSet = byte(mid(TempString, 5, 1), 1); 
					switch (offSet)
					{
						case (255):
							channel = opCode;
						case (0):
							channel = opCode + 4;
						case (1):
							channel = opCode + 8;
						case (2):
							channel = opCode + 12;
					}
					channel_fb$[channel] = value;
				} 
				clearbuffer(TempString);
			}			
		}
		xOK = 1;
	}    
}

/*******************************************************************************************

  Main Function

*******************************************************************************************/
Function Main()
{
	moduleName = "Dynalite_Area.usp"
	xOK = 1;
	join = 255;
	for (lastPreset = MAXPRESETS to 1 step -1)
	{
		if (isSignalDefined(preset$[lastPreset]))
		{
			break;
		}
	}
    for (lastChannel = MAXCHANNELS to 1 step -1)
	{
		if (isSignalDefined(channel$[lastChannel]))
		{
			break;
		}
	}
}


